{"ast":null,"code":"import { map, switchMap } from 'rxjs/operators';\nimport { of, BehaviorSubject } from 'rxjs';\nimport firebase from 'firebase/compat/app';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/compat/firestore\";\nimport * as i2 from \"./auth.service\";\nexport let FirestoreBillService = /*#__PURE__*/(() => {\n  class FirestoreBillService {\n    constructor(afs, auth) {\n      this.afs = afs;\n      this.auth = auth;\n      // 🔁 Step 1: Add this at the top inside the class\n      this.billChangedSource = new BehaviorSubject(false);\n      this.billChanged$ = this.billChangedSource.asObservable();\n    }\n    // 🔁 Step 2: Create a method to trigger this change\n    notifyBillChanged() {\n      this.billChangedSource.next(true);\n    }\n    get userId$() {\n      return this.auth.user$.pipe(map(user => user?.uid));\n    }\n    getBills() {\n      return this.userId$.pipe(switchMap(uid => {\n        if (!uid) return of([]);\n        return this.afs.collection(`users/${uid}/bills`).valueChanges({\n          idField: 'id'\n        });\n      }));\n    }\n    addBill(bill) {\n      return this.userId$.pipe(switchMap(uid => {\n        if (!uid) return of(null);\n        return this.afs.collection(`users/${uid}/bills`).add(bill);\n      }));\n    }\n    updateBill(bill) {\n      return this.userId$.pipe(switchMap(uid => {\n        if (!uid || !bill.id) {\n          console.warn('Missing UID or bill ID!', bill);\n          return of(null);\n        }\n        const updatedBill = {\n          ...bill,\n          paymentHistory: (bill.paymentHistory || []).map(d => d instanceof Date ? firebase.firestore.Timestamp.fromDate(d) : d)\n        };\n        return this.afs.doc(`users/${uid}/bills/${bill.id}`).update(updatedBill);\n      }));\n    }\n    deleteBill(billId) {\n      return this.userId$.pipe(switchMap(uid => {\n        if (!uid) return of(null);\n        return this.afs.doc(`users/${uid}/bills/${billId}`).delete();\n      }));\n    }\n    static {\n      this.ɵfac = function FirestoreBillService_Factory(t) {\n        return new (t || FirestoreBillService)(i0.ɵɵinject(i1.AngularFirestore), i0.ɵɵinject(i2.AuthService));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: FirestoreBillService,\n        factory: FirestoreBillService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return FirestoreBillService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}